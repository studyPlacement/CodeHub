Bottom up Solution---------------------------------------------------------------------------------------------------------

class Solution {    
public double new21Game(int n, int k, int maxPts) {
        if(k == 0 || n >= k - 1 + maxPts){
            return 1.0;
        }
        double dp[] = new double[n + 1];
        dp[0] = 1.0; double window = 1.0; double result = 0.0; 
        for(int i=1; i<=n; i++){
            dp[i] = window / maxPts;
            if(i < k){
                window += dp[i];
            } else {
                result += dp[i];
            }
            int out = i - maxPts;
            if(out >= 0 && out < k){
                window = window - dp[out];
            }
        }
        return result;
    }
}

Recursion + Memo -------------------------------------------------------------------------------------------------------

class Solution {
    Double dp[];
    public double new21Game(int n, int k, int maxPts) {
        dp = new Double[maxPts + n + 1];
        return solve(0, n, k, maxPts);
    }
    public double solve(int curr, int n, int k, int max){
        if(curr >= k){
            return curr <= n ? 1 : 0;
        }
        if(dp[curr] != null) return dp[curr];
        double ans = 0;
        for(int i=1; i<=max; i++){
            ans += solve(curr+i, n, k, max);
        }
        return dp[curr] = ans/max;
    }
}
