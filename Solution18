Brute force-------------------------------------------------------------------------

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Arrays.sort(nums);
        Set<List<Integer>> set = new HashSet<>();
        
        for (int i = 0; i < n - 3; i++) {
            for (int j = i + 1; j < n - 2; j++) {
                for (int k = j + 1; k < n - 1; k++) {
                    for (int l = k + 1; l < n; l++) {
                        long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];
                        if (sum == target) {
                            set.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        }
                    }
                }
            }
        }
        return new ArrayList<>(set);
    }
}

Optimized Approach--------------------------------------------------------------------------------------------------------

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Arrays.sort(nums);
        Set<List<Integer>> set = new HashSet<>();
        
        for (int i = 0; i < n - 3; i++) {
            for (int j = i + 1; j < n - 2; j++) {
                long newTarget = (long) target - nums[i] - nums[j];
                int low = j + 1, high = n - 1;
                
                while (low < high) {
                    long sum = (long) nums[low] + nums[high];
                    if (sum < newTarget) {
                        low++;
                    } else if (sum > newTarget) {
                        high--;
                    } else {
                        set.add(Arrays.asList(nums[i], nums[j], nums[low], nums[high]));
                        low++;
                        high--;
                    }
                }
            }
        }
        return new ArrayList<>(set);
    }
}

Optimal Approach----------------------------------------------------------------------------------------------------------

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue; // Skip duplicates
            
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue; // Skip duplicates
                
                long newTarget = (long) target - nums[i] - nums[j];
                int low = j + 1, high = n - 1;
                
                while (low < high) {
                    long sum = (long) nums[low] + nums[high];
                    
                    if (sum < newTarget) {
                        low++;
                    } else if (sum > newTarget) {
                        high--;
                    } else {
                        result.add(Arrays.asList(nums[i], nums[j], nums[low], nums[high]));
                        
                        int tempLow = nums[low], tempHigh = nums[high];
                        while (low < high && nums[low] == tempLow) low++;
                        while (low < high && nums[high] == tempHigh) high--;
                    }
                }
            }
        }
        return result;
    }
}
