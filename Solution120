Recursion + Memoization-----------------------------------------------------------------------------------------------------------

class Solution {
    Integer dp[][];
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        dp = new Integer[n][n];
        return solve(triangle, 0, 0);
    }
    public int solve(List<List<Integer>> list, int prevIdx, int row){
        if(row == list.size()-1){
            return list.get(row).get(prevIdx);
        }
        if(dp[row][prevIdx] != null) return dp[row][prevIdx];
        int ans1 = list.get(row).get(prevIdx) + solve(list, prevIdx, row+1);
        int ans2 = list.get(row).get(prevIdx) + solve(list, prevIdx+1, row+1);
        return dp[row][prevIdx] = Math.min(ans1, ans2);
    }
}

Bottom-up Approach---------------------------------------------------------------------------------------------------------------

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int dp[] = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = triangle.get(n - 1).get(i);
        }
        for (int row = n - 2; row >= 0; row--) {
            for (int col = 0; col <= row; col++) {
                dp[col] = triangle.get(row).get(col) + Math.min(dp[col], dp[col + 1]);
            }
        }
        return dp[0];
    }
}
