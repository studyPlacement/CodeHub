class Solution {
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for(int i=0; i<V; i++){
            list.add(new ArrayList<>());
        }
        for(int edge[]: edges){
            int u = edge[0]; int v = edge[1];
            list.get(u).add(v);
            list.get(v).add(u);
        }
        boolean vis[] = new boolean[V];
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(bfs(list, i, vis)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean bfs(ArrayList<ArrayList<Integer>> list, int curr, boolean vis[]){
        Queue <int[]> q = new LinkedList<>();
        q.add(new int[]{curr, -1}); 
        vis[curr] = true;
        while(!q.isEmpty()){
            int[] p = q.poll();
            int current = p[0]; int parent = p[1];
            for(int neighbour: list.get(current)){
                if(!vis[neighbour]){
                    q.add(new int[]{neighbour, current});
                    vis[neighbour] = true;
                } else {
                    if(parent != neighbour){
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
