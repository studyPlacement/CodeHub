class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0) return 0;
        int max = 1;
        int i=0; int j=0;
        HashSet<Character> set = new HashSet<>();
        while(j<s.length()){
            while(set.contains(s.charAt(j))){
                set.remove(s.charAt(i));
                i++;
            }
            set.add(s.charAt(j));
            max = Math.max(max, j-i+1);
            j++;
        }
        return max;
    }
}

C++ Code------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if (s.length() == 0) return 0;
        int maxLen = 1;
        int i = 0, j = 0;
        unordered_set<char> set;
        while (j < s.length()) {
            while (set.count(s[j])) {
                set.erase(s[i]);
                i++;
            }
            set.insert(s[j]);
            maxLen = max(maxLen, j - i + 1);
            j++;
        }
        return maxLen;
    }
};
