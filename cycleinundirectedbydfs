class Solution {
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for(int i=0; i<V; i++){
            list.add(new ArrayList<>());
        }
        for(int edge[]: edges){
            int u = edge[0]; int v = edge[1];
            list.get(u).add(v);
            list.get(v).add(u);
        }
        boolean vis[] = new boolean[V];
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(dfs(list, i, vis, -1)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(ArrayList<ArrayList<Integer>> list, int curr, boolean vis[], int parent){
        vis[curr] = true;
        
        for(int neighbour: list.get(curr)){
            if(!vis[neighbour]){
                if(dfs(list, neighbour, vis, curr)){
                    return true;
                }
            } else {
                if(neighbour != parent){
                    return true;
                }
            }
        }
        return false;
    }
}
