Q1--------------------------------------

class Solution {
    public int alternatingSum(int[] nums) {
        int sum = 0;
        for(int i=0; i<nums.length; i++){
            if(i%2 == 0){
                sum += nums[i];
            } else {
                sum -= nums[i];
            }
        }
        return sum;
    }
}

Q2----------------------------------------

class Solution {
    public int longestSubsequence(int[] nums) {
        int xor = 0; boolean flag = true;
        for(int num: nums){
            if(num != 0) flag = false;
            xor = xor ^ num;
        }
        if(flag){
            return 0; 
        }
        if(xor == 0){
            return nums.length-1;
        }
        return nums.length;
    }
}

Q3--------------------------------

class Solution {
    public String removeSubstring(String s, int k) {
        Stack<Character> stk = new Stack<>();
        int cnt = 0;
        for(char c: s.toCharArray()){
            stk.push(c);
            if(stk.size() >= 2*k){
                boolean isValid = true;
                Stack<Character> temp = new Stack<>();
                for(int i=0; i<k; i++){
                    if(!stk.isEmpty() && stk.peek() == ')'){
                        temp.push(stk.pop());
                    } else {
                        isValid = false;
                        break;
                    }
                }
                if(isValid){
                    for(int i=0; i<k; i++){
                        if(!stk.isEmpty() && stk.peek() == '('){
                            temp.push(stk.pop());
                        } else {
                            isValid = false;
                            break;
                        }
                    }
                }
                if(!isValid){
                    while(!temp.isEmpty()){
                        stk.push(temp.pop());
                    }
                }
            }   
        }
        StringBuilder sb = new StringBuilder();
        while(!stk.isEmpty()){
            sb.append(stk.pop());
        }
        return sb.reverse().toString();
    }
}
