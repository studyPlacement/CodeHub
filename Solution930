class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int count = 0;
        int sum = 0;
        HashMap <Integer, Integer> map = new HashMap<>();
        map.put(0,1);
        for(int i=0; i<nums.length; i++){
            sum += nums[i];
            if(map.containsKey(sum-goal)){
                count += map.get(sum-goal);
            }
            map.put(sum, map.getOrDefault(sum,0)+1);
        }
        return count;
    }
}

C++ Code------------------------------

#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int count = 0;
        int sum = 0;
        unordered_map<int, int> map;
        map[0] = 1;

        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
            if (map.find(sum - goal) != map.end()) {
                count += map[sum - goal];
            }
            map[sum]++;
        }
        return count;
    }
};
