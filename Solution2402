My Java Code-----------------------------

class Solution {
    public int mostBooked(int n, int[][] meetings) {
        int meetingCount[] = new int[n];
        long endTimes[] = new long[n];

        Arrays.sort(meetings, (a, b) -> Integer.compare(a[0], b[0]));
        for(int meeting[]: meetings){
            int start = meeting[0];
            int end = meeting[1];
            int duration = end - start;

            int free = -1;
            for(int i=0; i<n; i++){
                if(endTimes[i] <= start){
                    free = i;
                    break;
                }
            }
            if(free != -1){
                endTimes[free] = start + duration;
                meetingCount[free]++;
            } else {
                int earlyRoom = 0;
                long time = endTimes[0];
                for(int i=1; i<n; i++){
                    if(endTimes[i] < time){
                        time = endTimes[i];
                        earlyRoom = i;
                    }
                }
                endTimes[earlyRoom] = time + duration;
                meetingCount[earlyRoom]++;
            }
        }
        int max = 0; int room = 0;
        for(int i=0; i<n; i++){
            if(meetingCount[i] > max){
                max = meetingCount[i];
                room = i;
            }
        }
        return room;
    }
}

C++ Code-----------------------------------------------------

class Solution {
public:
    int mostBooked(int n, vector<vector<int>>& meetings) {
        vector<int> meetingCount(n, 0);
        vector<long> endTimes(n, 0);

        // Sort the meetings based on their start time
        sort(meetings.begin(), meetings.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] < b[0];
        });

        for (auto& meeting : meetings) {
            int start = meeting[0];
            int end = meeting[1];
            int duration = end - start;

            int free = -1;
            // Check if there is a free room
            for (int i = 0; i < n; i++) {
                if (endTimes[i] <= start) {
                    free = i;
                    break;
                }
            }

            if (free != -1) {
                endTimes[free] = start + duration;
                meetingCount[free]++;
            } else {
                int earlyRoom = 0;
                long time = endTimes[0];
                // Find the room that becomes available the earliest
                for (int i = 1; i < n; i++) {
                    if (endTimes[i] < time) {
                        time = endTimes[i];
                        earlyRoom = i;
                    }
                }
                endTimes[earlyRoom] = time + duration;
                meetingCount[earlyRoom]++;
            }
        }

        // Find the room with the maximum number of meetings
        int max = 0;
        int room = 0;
        for (int i = 0; i < n; i++) {
            if (meetingCount[i] > max) {
                max = meetingCount[i];
                room = i;
            }
        }

        return room;
    }
};
