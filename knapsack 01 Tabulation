My Java Code--------------------

int knapsack(int W, int wt[], int val[], int n) {
    int[][] dp = new int[n+1][W+1];

    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0){
                dp[i][w] = 0;
            }else if (wt[i-1] <= w){
              int choice1 = val[i-1] + dp[i-1][w - wt[i-1]];
              int choice2 = dp[i-1][j];
                dp[i][w] = Math.max(choice1, choice2);
            }else{
                dp[i][w] = dp[i-1][w];
            }
        }
    }
    return dp[n][W];
}


C++ Code---------------------------

int knapsack(int W, vector<int>& wt, vector<int>& val, int n) {
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (wt[i - 1] <= w) {
                int choice1 = val[i - 1] + dp[i - 1][w - wt[i - 1]];
                int choice2 = dp[i - 1][w];
                dp[i][w] = max(choice1, choice2);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][W];
}
