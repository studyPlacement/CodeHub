class Solution {
    // Function to calculate the number of subsets with a given sum
    Integer dp[][];
    public int perfectSum(int[] nums, int target) {
        // code here
        dp = new Integer[nums.length][target+1];
        return solve(nums, target, 0);
    }
    public int solve(int nums[], int target, int idx){
        if(idx == nums.length){
            return target == 0 ? 1 : 0;
        }
        if(target < 0 || idx >= nums.length){
            return 0;
        }
        if(dp[idx][target] != null) return dp[idx][target];
        int include = solve(nums, target-nums[idx], idx+1);
        int exclude = solve(nums, target, idx+1);
        return dp[idx][target] = include + exclude;
    }
}

C++ Code-------------------------------------------------------------------------------------------

class Solution {
public:
    vector<vector<int>> dp;

    int perfectSum(vector<int>& nums, int target) {
        int n = nums.size();
        dp.resize(n, vector<int>(target + 1, -1));
        return solve(nums, target, 0);
    }

    int solve(vector<int>& nums, int target, int idx) {
        if (idx == nums.size()) {
            return target == 0 ? 1 : 0;
        }

        if (target < 0 || idx >= nums.size()) {
            return 0;
        }

        if (dp[idx][target] != -1) return dp[idx][target];

        int include = solve(nums, target - nums[idx], idx + 1);
        int exclude = solve(nums, target, idx + 1);

        return dp[idx][target] = include + exclude;
    }
};
