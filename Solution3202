class Solution {
    public int maximumLength(int[] nums, int k) {
        int n = nums.length;
        int[][] dp = new int[n][k];
        int ans = 0;

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                int mod = (nums[i] + nums[j]) % k;
                dp[i][mod] = Math.max(dp[i][mod], dp[j][mod] + 1);
                ans = Math.max(ans, dp[i][mod]);
            }
        }
        return ans + 1;
    }
}


C++ Code------------------------------------------------------------------------------------------------

class Solution {
public:
    int maximumLength(vector<int>& arr, int m) {
        int len = arr.size();
        vector<vector<int>> dp(len, vector<int>(m, 0));
        int result = 0;

        for (int curr = 1; curr < len; ++curr) {
            for (int prev = 0; prev < curr; ++prev) {
                int remainder = (arr[curr] + arr[prev]) % m;
                dp[curr][remainder] = max(dp[curr][remainder], dp[prev][remainder] + 1);
                result = max(result, dp[curr][remainder]);
            }
        }
        return result + 1;
    }
};
