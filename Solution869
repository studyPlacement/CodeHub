class Solution {
    public boolean reorderedPowerOf2(int n) {
        String s = String.valueOf(n);
        char arr[] = s.toCharArray();
        Arrays.sort(arr);
        boolean[] used = new boolean[arr.length];
        return solve(arr, used, 0, 0);
    }
    public boolean solve(char arr[], boolean used[], int idx, int num){
        if (idx == arr.length) {
            return (num & (num-1)) == 0;
        }
        for (int i = 0; i < arr.length; i++) {
            if (used[i]) continue;
            if (idx == 0 && arr[i] == '0') continue;
            if (i > 0 && arr[i] == arr[i-1]) continue;

            used[i] = true;
            if (solve(arr, used, idx + 1, num * 10 + (arr[i] - '0')))
                return true;
            used[i] = false;
        }
        return false;

    }
}


Optimal --------------------------------------------------------------------------------------------

class Solution {
    public boolean reorderedPowerOf2(int n) {
        String target = sort(n);
        for(int i=0; i<31; i++){
            String power = sort(1<<i);
            if(target.equals(power)){
                return true;
            }
        }
        return false;
    }
    public String sort(int n){
        char arr[] = String.valueOf(n).toCharArray();
        Arrays.sort(arr);
        return new String(arr);
    }
}
