class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int dp[][] = new int[val.length][W+1];
        for(int row[]: dp){
            Arrays.fill(row, -1);
        }
        return solve(W, val, wt, 0, dp);
    }
    public static int solve(int W, int val[], int wt[], int idx, int dp[][]){
        if(idx >= val.length || W == 0){
            return 0;
        }
        if(dp[idx][W] != -1) return dp[idx][W];
        int include = 0;
        if(W >= wt[idx]){
            include = val[idx] + solve(W-wt[idx], val, wt, idx+1, dp);
        }
        int exclude = solve(W, val, wt, idx+1, dp);
        return dp[idx][W] = Math.max(include, exclude);
    }
}


C++ Code----------------------------------------------------------------------------


class Solution {
public:
    int knapSack(int W, int wt[], int val[], int n) {
        vector<vector<int>> dp(n, vector<int>(W + 1, -1));
        return solve(W, val, wt, 0, dp, n);
    }
    
    int solve(int W, int val[], int wt[], int idx, vector<vector<int>>& dp, int n) {
        if (idx >= n || W == 0) {
            return 0;
        }
        if (dp[idx][W] != -1) return dp[idx][W];
        int include = 0;
        if (W >= wt[idx]) {
            include = val[idx] + solve(W - wt[idx], val, wt, idx + 1, dp, n);
        }
        int exclude = solve(W, val, wt, idx + 1, dp, n);
        return dp[idx][W] = max(include, exclude);
    }
};
