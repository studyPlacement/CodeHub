Brute force C++ Code-------------------------------------------------------------------------------------

class Solution {
public:
    int largestPerimeter(vector<int>& nums) {
        int n = nums.size();
        int maxPerimeter = 0;
        for(int i = 0; i < n - 2; i++) {
            for(int j = i + 1; j < n - 1; j++) {
                for(int k = j + 1; k < n; k++) {
                    if(nums[i] + nums[j] > nums[k] &&
                       nums[i] + nums[k] > nums[j] &&
                       nums[j] + nums[k] > nums[i]) {
                        maxPerimeter = max(maxPerimeter, nums[i] + nums[j] + nums[k]);
                    }
                }
            }
        }
        return maxPerimeter;
    }
};

Optimized code C++---------------------------------------------------------------------------------------------

class Solution {
public:
    int largestPerimeter(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for(int i = n - 1; i >= 2; i--) {
            int x = nums[i - 1] + nums[i - 2];
            if(x > nums[i]) {
                return x + nums[i];
            }
        }
        return 0;
    }
};

Brute Foce Java-------------------------------------------------------------------------------------------------

class Solution {
    public int largestPerimeter(int[] nums) {
        int n = nums.length;  int max = 0;
        for(int i=0; i<n-2; i++){
            for(int j=i+1; j<n-1; j++){
                for(int k=j+1; k<n; k++){
                    if(nums[i] + nums[j] > nums[k] && nums[i] + nums[k] > nums[j] && nums[j] + nums[k] > nums[i]){
                        max = Math.max(max, nums[i] + nums[j] + nums[k]);
                    }
                }
            }
        }
        return max;
    }
}

Optimized Java------------------------------------------------------------------------------------------------

class Solution {
    public int largestPerimeter(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        for(int i=n-1; i>=2; i--){
            int x = nums[i-1] + nums[i-2];
            if(x > nums[i]){
                return x + nums[i];
            }
        }
        return 0;
    }
}
